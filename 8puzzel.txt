import heapq
class PuzzleNode:
    def __init__(self, state, parent=None, action=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def manhattan_distance(state, goal_state):
    distance = 0
    for i in range(3):
        for j in range(3):
            tile = state[i][j]
            if tile != 0:
                goal_position = find_position(goal_state, tile)
                distance += abs(i - goal_position[0]) + abs(j - goal_position[1])
    return distance

def find_position(matrix, value):
    for i, row in enumerate(matrix):
        for j, cell in enumerate(row):
            if cell == value:
                return i, j
    raise ValueError(f"{value} not found in the matrix")

def get_neighbors(node):
    neighbors = []
    i, j = next((r, c) for r, row in enumerate(node.state) for c, val in enumerate(row) if val == 0)

    for x, y in [(i, j - 1), (i, j + 1), (i - 1, j), (i + 1, j)]:
        if 0 <= x < 3 and 0 <= y < 3:
            new_state = [row.copy() for row in node.state]
            new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
            neighbors.append(PuzzleNode(new_state, parent=node, action=(i, j)))
    return neighbors

def best_first_search(initial_state, goal_state):
    start_node = PuzzleNode(initial_state, None, None, 0, manhattan_distance(initial_state, goal_state))
    heap = [start_node]
    heapq.heapify(heap)
    visited = set()

    while heap:
        current_node = heapq.heappop(heap)
        if current_node.state == goal_state:
            return current_node
        visited.add(tuple(map(tuple, current_node.state)))

        for neighbor in get_neighbors(current_node):
            if tuple(map(tuple, neighbor.state)) not in visited:
                heapq.heappush(heap, neighbor)

    return None  # No solution found

def print_solution_path(solution_node):
    path = []
    while solution_node:
        path.append(solution_node.state)
        solution_node = solution_node.parent
    for state in reversed(path):
        print_state(state)

def print_state(state):
    for row in state:
        print(row)
    print()

# Example usage:
initial_state = [[1, 2, 3], [0, 4, 6], [7, 5, 8]]
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

solution_node = best_first_search(initial_state, goal_state)

if solution_node:
    print("Solution Found:")
    print_solution_path(solution_node)
else:
    print("No solution found.")


##RESULT
Python
import heapq
Use code with caution. Learn more
This line imports the heapq module, which is used to implement priority queues.

PuzzleNode Class
Python
class PuzzleNode:
  def __init__(self, state, parent=None, action=None, cost=0, heuristic=0):
    self.state = state
    self.parent = parent
    self.action = action
    self.cost = cost
    self.heuristic = heuristic
Use code with caution. Learn more
This block of code defines a class called PuzzleNode. This class represents a node in the search tree for the 8-puzzle problem. Each node has the following attributes:

state: The current state of the puzzle
parent: The parent node
action: The action that was taken to move from the parent node to the current node
cost: The cost of the path from the start node to the current node
heuristic: An estimate of the distance from the current node to the goal node
The __init__() method initializes the attributes of the PuzzleNode object.

Python
  def __lt__(self, other):
    return (self.cost + self.heuristic) < (other.cost + other.heuristic)
Use code with caution. Learn more
This method defines the __lt__() operator for the PuzzleNode class. This operator is used to compare two PuzzleNode objects. The operator returns True if the first node has a lower total cost (cost + heuristic) than the second node, and False otherwise. This ensures that the nodes with lower total costs are explored first in the search algorithm.

Manhattan Distance Function
Python
def manhattan_distance(state, goal_state):
  distance = 0
  for i in range(3):
    for j in range(3):
      tile = state[i][j]
      if tile != 0:
        goal_position = find_position(goal_state, tile)
        distance += abs(i - goal_position[0]) + abs(j - goal_position[1])
  return distance
Use code with caution. Learn more
This function calculates the Manhattan distance between two puzzle states. The Manhattan distance is a heuristic function that estimates the distance between two states by considering the number of moves required to move each tile to its goal position. The function takes two states as input and returns the Manhattan distance between them.

Python
def find_position(matrix, value):
  for i, row in enumerate(matrix):
    for j, cell in enumerate(row):
      if cell == value:
        return i, j
  raise ValueError(f"{value} not found in the matrix")
Use code with caution. Learn more
This function finds the position of a given value in a matrix. The function takes two arguments: the matrix and the value to search for. The function returns the row and column indices of the value in the matrix. If the value is not found, the function raises a ValueError exception.

Get Neighbors Function
Python
def get_neighbors(node):
  neighbors = []
  i, j = next((r, c) for r, row in enumerate(node.state) for c, val in enumerate(row) if val == 0)

  for x, y in [(i, j - 1), (i, j + 1), (i - 1, j), (i + 1, j)]:
    if 0 <= x < 3 and 0 <= y < 3:
      new_state = [row.copy() for row in node.state]
      new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
      neighbors.append(PuzzleNode(new_state, parent=node, action=(i, j)))
  return neighbors
Use code with caution. Learn more
This function generates the neighbors of a given node in the search tree. The function takes a PuzzleNode object as input and returns a list of PuzzleNode objects representing the neighbors of the input node. A neighbor is defined as a state that can be reached from the current state by a single move.

Best-First Search Function
Python
def best_first_search(initial_state, goal_state):
  start_node = PuzzleNode(initial_state, None, None, 0, manhattan_distance(initial_state, goal_state))
  heap = [start_node]
  heapq.heapify(heap)
  visited = set()

  while heap:
    current_node = heapq.heappop(heap