import heapq

def best_first_search(graph, start, goal):

pq [(0, start)] 
visited set ()

while pq:

cost, current heapq.heappop (pq)

if current == goal:
 print ("Goal reached!")
 return

if current not in visited:
 visited.add(current) 
print (f"Visiting node: (current)")

for neighbor, weight in graph[current]:

if neighbor not in visited: 
heapq.heappush(pq, (weight, neighbor))

print("Goal not reachable.")

#Define the graph

graph={

'A' : [('B', 2), ('C', 4)],

'B': [('A', 1), ('D', 2)], 
'C':[('A', 4), ('E', 6)],

'D': [('B', 3), ('F', 4)],
'E': ['C', 6), ('F', 8)],

'F': (('D', 4), ('E', 5)]
}

best_first_search(graph, 'A', 'D')


##RESULT
Python
import heapq
Use code with caution. Learn more
This line imports the heapq module, which is used to implement priority queues.

Python
def best_first_search(graph, start, goal):
Use code with caution. Learn more
This line defines a function called best_first_search(). It takes three arguments: graph, start, and goal. The graph argument is a dictionary representing the graph. The start argument is the starting node of the search. The goal argument is the node we are trying to find.

Python
pq = [(0, start)]
visited = set()
Use code with caution. Learn more
These lines initialize two variables: pq and visited. The pq variable is a priority queue, which is a data structure that stores items and assigns them priorities. The priority of an item is determined by its first element. The visited variable is a set of nodes that have already been visited.

Python
while pq:
Use code with caution. Learn more
This line starts a loop that iterates as long as the pq priority queue is not empty.

Python
cost, current = heapq.heappop(pq)
Use code with caution. Learn more
This line removes the first item from the pq priority queue and assigns its values to the variables cost and current. The cost variable is the priority of the item, and the current variable is the node itself.

Python
if current == goal:
    print("Goal reached!")
    return
Use code with caution. Learn more
This line checks if the current node (current) is the same as the goal node. If it is, it prints a message that the goal has been reached and returns from the function.

Python
if current not in visited:
    visited.add(current)
    print(f"Visiting node: {current}")
Use code with caution. Learn more
This block of code checks if the current node (current) has already been visited. If not, it adds the node to the visited set and prints a message that the node is being visited.

Python
for neighbor, weight in graph[current]:
Use code with caution. Learn more
This line loops over all of the neighbors of the current node (current). The neighbors of a node are the nodes that are connected to it by an edge. The weight variable is the weight of the edge between the current node and the neighbor.

Python
if neighbor not in visited:
    heapq.heappush(pq, (weight, neighbor))
Use code with caution. Learn more
This block of code checks if the neighbor has already been visited. If not, it adds the neighbor to the pq priority queue with the weight of the edge as its priority. This ensures that the neighbors with lower weights are explored first.

Python
print("Goal not reachable.")
Use code with caution. Learn more
This line is never reached because the function returns from the first if current == goal: statement if the goal is reached. It is left here for completeness.

Python
# Define the graph

graph = {
    'A': [('B', 2), ('C', 4)],

    'B': [('A', 1), ('D', 2)],

    'C': [('A', 4), ('E', 6)],

    'D': [('B', 3), ('F', 4)],

    'E': [('C', 6), ('F', 8)],

    'F': [('D', 4), ('E', 5)]
}
Use code with caution. Learn more
This block of code defines the graph as a dictionary. The keys of the dictionary are the nodes of the graph, and the values of the dictionary are lists of tuples of neighbors and weights. Each tuple represents an edge, and the first element of the tuple is the neighbor node, and the second element is the weight of the edge.

Python
best_first_search(graph, 'A', 'D')
Use code with caution. Learn more
This line calls the best_first_search() function to find the shortest path from node A to node D in the graph.